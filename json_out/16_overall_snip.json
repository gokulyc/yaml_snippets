{"key": "value", "another_key": "Another value goes here.", "a_number_value": 100, "scientific_notation": "1e+12", "hex_notation": 291, "octal_notation": 83, "boolean": true, "null_value": null, "another_null_value": null, "key with spaces": "value", "false": false, "true": false, "not_enclosed": true, "enclosed": "yes", "however": "A string, enclosed in quotes.", "Keys can be quoted too.": "Useful if you want to put a ':' in your key.", "single quotes": "have 'one' escape pattern", "double quotes": "have many: \", \u0000, \t, \u263a, \r\n == \r\n, and more.", "Superscript two": "\\u00B2", "special_characters": "[ John ] & { Jane } - <Doe>", "literal_block": "This entire block of text will be the value of the 'literal_block' key,\nwith line breaks being preserved.\n\nThe literal continues until de-dented, and the leading indentation is\nstripped.\n\n    Any lines that are 'more-indented' keep the rest of their indentation -\n    these lines will be indented by 4 spaces.\n", "folded_style": "This entire block of text will be the value of 'folded_style', but this time, all newlines will be replaced with a single space.\nBlank lines, like above, are converted to a newline character.\n\n    'More-indented' lines keep their newlines, too -\n    this text will appear over two lines.\n", "literal_strip": "This entire block of text will be the value of the 'literal_block' key,\nwith trailing blank line being stripped.", "block_strip": "This entire block of text will be the value of 'folded_style', but this time, all newlines will be replaced with a single space and  trailing blank line being stripped.", "literal_keep": "This entire block of text will be the value of the 'literal_block' key,\nwith trailing blank line being kept.\n\n", "block_keep": "This entire block of text will be the value of 'folded_style', but this time, all newlines will be replaced with a single space and  trailing blank line being kept.\n\n", "a_nested_map": {"key": "value", "another_key": "Another Value", "another_nested_map": {"hello": "hello"}}, "0.25": "a float key", "This is a key\nthat has multiple lines\n": "and this is its value", "a_sequence": ["Item 1", "Item 2", 0.5, "Item 4", {"key": "value", "another_key": "another_value"}, ["This is a sequence", "inside another sequence"], [["Nested sequence indicators", "can be collapsed"]]], "json_map": {"key": "value"}, "json_seq": [3, 2, 1, "takeoff"], "and quotes are optional": {"key": [3, 2, 1, "takeoff"]}, "anchored_content": "This string will appear as the value of two keys.", "other_anchor": "This string will appear as the value of two keys.", "base": {"name": "Everyone has same name"}, "foo": {"name": "John", "age": 10}, "bar": {"name": "Everyone has same name", "age": 20}, "explicit_boolean": true, "explicit_integer": 42, "explicit_float": -42.24, "explicit_string": "0.5", "explicit_datetime": "2022-11-17 12:34:56.780000+09:00", "explicit_null": null, "datetime_canonical": "2001-12-15 02:59:43.100000+00:00", "datetime_space_separated_with_time_zone": "2001-12-14 21:59:43.100000-05:00", "date_implicit": "2002-12-14", "date_explicit": "2002-12-14", "gif_file": "b\"GIF89a\\x0c\\x00\\x0c\\x00\\x84\\x00\\x00\\xff\\xff\\xf7\\xf5\\xf5\\xee\\xe9\\xe9\\xe5fff\\x00\\x00\\x00\\xe7\\xe7\\xe7^^^\\xf3\\xf3\\xed\\x8e\\x8e\\x8e\\xe0\\xe0\\xe0\\x9f\\x9f\\x9f\\x93\\x93\\x93\\xa7\\xa7\\xa7\\x9e\\x9e\\x9eiiiccc\\xa3\\xa3\\xa3\\x84\\x84\\x84\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9\\xff\\xfe\\xf9!\\xfe\\x0eMade with GIMP\\x00,\\x00\\x00\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\x05,  \\x8e\\x810\\x9e\\xe3@\\x14\\xe8i\\x10\\xc4\\xd1\\x8a\\x08\\x1c\\xcf\\x80M$z\\xef\\xff0\\x85p\\xb8\\xb01f\\r\\x1b\\xce\\x01\\xc3\\x01\\x1e\\x10' \\x82\\n\\x01\\x00;\"", "set": {"item1": null, "item2": null, "item3": null}, "or": {"item1": null, "item2": null, "item3": null}, "set2": {"item1": null, "item2": null, "item3": null}}